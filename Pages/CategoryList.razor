
@page "/category"
@inject ICategory _CategoryServ
@inject IJSRuntime _jsRuntime
@using System.ComponentModel.DataAnnotations

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>

@* @inject ICategoryRepository _categoryRepository *@
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">Add New Category </a>
    </div>
</div>
 @if (Categories.Any())
        {
            <table class="table table-bordered">
                 <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var objCat in Categories)
                    {
                        <tr>
                            <td>
                                @objCat.Name
                            </td> 
                            <td>
                            <NavLink class="btn-primary btn" href="@($"category/edit/{objCat.Id}")">Edit</NavLink>
                            <button class="btn btn-danger" @onclick="()=>HandleDelete(objCat.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }else
        {
            if (IsLoading)
            {
                //loading gif
                <div class="text-center">
                <img src="/images/loading.gif">
                    </div>
            }
            else
            {
                //no records
                <p>No recrods found.</p>
            }
       
        }
       
@code {
   
    private IEnumerable<CategoryDto> Categories {get;set;}=  new List<CategoryDto>();
        
    
    public bool IsLoading {get;set;}
    
    private int DeleteCategoryId { get; set; } = 0;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategoryList();
        }
    }
    @* protected override async Task OnInitializedAsync()
    
    {
        await Task.Run(LoadCategoryList);
        
    } *@

    private  async Task LoadCategoryList()
    {
        IsLoading=true;
        StateHasChanged();
        Categories = await _CategoryServ.GetAll();
        IsLoading=false;
        StateHasChanged();
    }

     private void HandleDelete(int id)
    {
        DeleteCategoryId=id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }
    
    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading=true;
        if(isConfirmed && DeleteCategoryId!=0)
        {
            //delete
            @* await Task.Delay(500); *@
             await _CategoryServ.Delete(DeleteCategoryId);
             await LoadCategoryList();
             _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading=false;
    }
    @* protected override void OnInitialized()
    {
        Categories = _CategoryServ.GetAll();

    } *@

    }
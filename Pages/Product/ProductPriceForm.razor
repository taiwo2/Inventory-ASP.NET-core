@page "/product/create"
@page "/product/edit/{Id:int}"
@inject ICategory _CategoryServ
@inject IProduct _ProductServ
@inject IFileUpload _fileUpload
@inject NavigationManager _navigationManager
@inject IJSRuntime _Runtime

@* @inject IProductPrice _productPriceRepository *@
@* @attribute [Authorize] *@
<div class="row my-2">
<h3 class="card-title text-primary mb-3 ml-3">Product Price Managment</h3>
<div class="col-md-10">
 @if (IsLoading)
{
             <div class="text-center">
                <img src="/images/loading.gif">
    </div>
}
else
{
     <EditForm model="Product" OnValidSubmit="FormSubmit">
                <DataAnnotationsValidator/>
                @* <ValidationSummary/> *@
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="Product.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Name"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Color</label>
                    <InputText @bind-Value="Product.Color" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Color"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <InputTextArea @bind-Value="Product.Description" class="form-control"></InputTextArea>
                    <ValidationMessage For="()=>Product.Description"></ValidationMessage>
                </div>
                <div class="row pt-3">
                    <div class="btn-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.ShopFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">ShopFavorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.CustomerFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">CustomerFavorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                         <label class="form-check-label">Categories</label> 
                        <InputSelect @bind-Value="Product.CategoryId" class="form-select">
                        <option value="0" disabled="disabaled" selected >--- select Category--</option>
                        @foreach( var cat in Categories)
                        {
                            <option value="@cat.Id">@cat.Name</option>
                        }
                        </InputSelect>
                    </div>
                    <div class="form-group pt-4 col-6">
                        <InputFile OnChange="HandleImageUpload"></InputFile>
                    </div>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="product" class="btn btn-secondary">Back to Index</NavLink>
                </div>
    </EditForm>

}
</div>
<div class="col-md-2">
        <img src="@Product.ImageUrl" class="w-100">
</div>
    </div>

@code {
    [Parameter]
    public int Id { get; set; } 
    private ProductDTO Product { get; set; } = new()
    {
        ImageUrl="/images/today.png"
    
    };
    private IEnumerable<CategoryDTO> Categories {get;set;}=  new List<CategoryDTO>();
    private bool IsLoading { get; set; }
    private string Title {get;set;} = "Create";
    public string OldImageUrl {get;set;}
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            {
                await LoadProductEdit();
                    
            }
          
    }
        private async Task LoadProductEdit()
        {
            IsLoading=true;
            StateHasChanged();
            Categories = await _CategoryServ.GetAll();
            if (Id!=0)
            {
                Title="Update";
                Product= await _ProductServ.Get(Id);
                OldImageUrl = Product.ImageUrl;
            }
            IsLoading=false;
            StateHasChanged();
        }  
            private async Task FormSubmit()
            {
                if (Product.Id==0)
                {
                    
                    //create
                    await _ProductServ.Create(Product);
                    await _Runtime.ToastrSuccess("Product created successfully.");

                }else
                {
                    //update
                if (OldImageUrl!=Product.ImageUrl)
                {
                    _fileUpload.DeleteFile(OldImageUrl);

                }
                
                await _ProductServ.Update(Product);
                await _Runtime.ToastrSuccess("Product updated successfully.");
                }
                _navigationManager.NavigateTo("product");

            }
            private async Task HandleImageUpload(InputFileChangeEventArgs e)
            {
                IsLoading=true;
                try
                {
                    if (e.GetMultipleFiles().Count>0)
                    {
                        foreach (var file in e.GetMultipleFiles())
                        {
                            System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                            if (fileInfo.Extension.ToLower() == ".jpg" ||
                              fileInfo.Extension.ToLower() == ".png" ||
                              fileInfo.Extension.ToLower() == ".jpeg")
                            {
                                Product.ImageUrl = await _fileUpload.UploadFile(file);
                            }
                            else
                            {
                                await _Runtime.ToastrError("Please select .jpg/.jpeg/.png file only");
                                return;
                            }
                        }
                    }
                        IsLoading=false;
                }
                catch(Exception ex)
                {
                    await _Runtime.ToastrError(ex.Message);
                 }
            } 

}